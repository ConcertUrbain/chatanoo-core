AWSTemplateFormatVersion: 2010-09-09
Description: Chatanoo Core

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Configuration
        Parameters: ["ProjectName", "MultiAZ", "DeploymentBucket"]
      - Label:
          default: Advanced Configuration
        Parameters: ["CoreApplicationKey", "CoreDBSchemaKey", "ChatanooApiKeyKey"]
      - Label:
          default: Instances Type
        Parameters: ["MemcachedInstanceType", "RDSInstanceType", "CoreInstanceType"]
      - Label:
          default: DNS Configuration
        Parameters: ["SubDomainName", "VPCId", "EC2KeyName", "Route53HostedZone"]
      - Label:
          default: Copy from an existing project ?
        Parameters: ["DBSnapshot", "DBSnapshotUser", "DBSnapshotPassword", "ChatanooApiKeyBucketSource"]
      - Label:
          default: Custom Resources Configuration
        Parameters: ["S3UploaderLambda", "PasswordGeneratorLambda", "SQLRequestLambda"]

Parameters:
  ProjectName:
    Type: String
  MultiAZ:
    Type: String
    AllowedValues: ["true", "false"]
    Default: false
  UseSecureConnection:
    Description: Use HTTPS to connect this website
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
  DeploymentBucket:
    Description: Name of Chatanoo Deployment Bucket
    Type: String
    Default: chatanoo-deployment

  CoreApplicationKey:
    Type: String
    Default: core/application/1.0.0.zip
  CoreDBSchemaKey:
    Type: String
    Default: core/database/1.0.0.zip
  ChatanooApiKeyKey:
    Type: String
    Default: core/chatanoo-apikey/1.0.0.zip

  MemcachedInstanceType:
    Type: String
    Default: cache.t2.micro
    AllowedValues:
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
      - cache.m3.medium
      - cache.m3.large
      - cache.m3.xlarge
      - cache.m3.2xlarge
      - cache.m4.large
      - cache.m4.xlarge
      - cache.m4.2xlarge
      - cache.m4.4xlarge
      - cache.m4.10xlarge
      - cache.r3.large
      - cache.r3.xlarge
      - cache.r3.2xlarge
      - cache.r3.4xlarge
      - cache.r3.8xlarge
  RDSInstanceType:
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m4.4xlarge
      - db.m4.10xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.m1.small
      - db.m1.medium
      - db.m1.large
      - db.m1.xlarge
      - db.t1.micro
  CoreInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - x1.16xlarge
      - x1.32xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge

  DBSnapshot:
    Type: String
    Description: RDS Snapshot identifier or arn if it come from an another account
  DBSnapshotUser:
    Type: String
  DBSnapshotPassword:
    Type: String
  ChatanooApiKeyBucketSource:
    Type: String

  SubDomainName:
    Description: Subdomain Name of the website
    Type: String
  VPCId:
    Description: AWS VPC ID
    Type: AWS::EC2::VPC::Id
  CidrPrefix:
    Type: String
    Default: '10.0.3'
  EC2KeyName:
    Description: EC2 KeyName
    Type: AWS::EC2::KeyPair::KeyName
  Route53HostedZone:
    Description: AWS Route53 HostedZone ID of the domain
    Type: String
  PrivateRouteTable:
    Type: String
  PublicRouteTable:
    Type: String
  InstanceSecurityGroup:
    Type: String
  ResourceSecurityGroup:
    Type: String

  S3UploaderLambda:
    Description: Lambda for the S3 Uploader Custom Resource
    Type: String
    Default: aws-cloudformation-s3-uploader-1-0-0"
  PasswordGeneratorLambda:
    Description: Lambda for the Password Generator Custom Resource
    Type: String
    Default: aws-cloudformation-password-generator-1-0-0"
  SQLRequestLambda:
    Description: Lambda for the SQL Request Custom Resource
    Type: String
    Default: aws-cloudformation-sql-request-1-0-0"
  Route53HostedZoneDetailsLambda:
    Description: Lambda for the Route53 HostedZone Details Custom Resource
    Type: String
    Default: aws-cloudformation-route53-hostedzone-details-1-0-0

# Mappings

Conditions:
  UseDNSRecord: !Not [!Equals [!Ref Route53HostedZone, ""]]
  UseMultiAZ: !Equals [!Ref MultiAZ, "true"]
  UseHTTPS: !Equals [!Ref UseSecureConnection, "true"]
  UseDNSAndHTTPS: !And
    - !Condition UseDNSRecord
    - !Condition UseHTTPS
  UseDBSnapshot: !Not [!Equals [!Ref DBSnapshot, ""]]
  DontUseDBSnapshot: !Not [!Condition UseDBSnapshot]

Resources:

  DomainName:
    Type: Custom::Route53HostedZoneDetails
    Version: '1.0'
    Condition: UseDNSRecord
    Properties:
      ServiceToken: !Join [':', ['arn:aws:lambda', !Ref 'AWS::Region', !Ref 'AWS::AccountId', function, !Ref Route53HostedZoneDetailsLambda]]
      Id: !Ref Route53HostedZone

  #############
  # Memcached #
  #############

  MemcachedSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Sub "${CidrPrefix}.0/27"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select ['0', !GetAZs { Ref: 'AWS::Region'}]
      Tags:
        - Key: Name
          Value: !Sub "Chatano MemcachedSubnet1 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  MemcachedSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MemcachedSubnet1
      RouteTableId: !Ref PrivateRouteTable

  MemcachedSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Sub "${CidrPrefix}.32/27"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select ['1', !GetAZs { Ref: 'AWS::Region'}]
      Tags:
        - Key: Name
          Value: !Sub "Chatano MemcachedSubnet2 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  MemcachedSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MemcachedSubnet2
      RouteTableId: !Ref PrivateRouteTable

  MemcachedNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Sub "Chatano MemcachedNetworkAcl (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  InboundMemcachedNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MemcachedNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Sub "${CidrPrefix}.128/26" # CoreSubnets Cidr
      PortRange:
        From: 11211
        To: 11211

  InboundEmphemeralMemcachedNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MemcachedNetworkAcl
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Sub "${CidrPrefix}.128/26" # CoreSubnets Cidr
      PortRange:
        From: 1024
        To: 65535

  OutboundMemcachedNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MemcachedNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  MemcachedSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref MemcachedSubnet1
      NetworkAclId: !Ref MemcachedNetworkAcl

  MemcachedSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref MemcachedSubnet2
      NetworkAclId: !Ref MemcachedNetworkAcl

  MemcachedClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Chatanoo Memcached Client SecurityGroup
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Sub "Chatano MemcachedClientSecurityGroup (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  MemcachedClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Chatanoo Memcached Cluster SecurityGroup
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Sub "Chatano MemcachedClusterSecurityGroup (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  MemcachedClusterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MemcachedClusterSecurityGroup
      IpProtocol: tcp
      ToPort: 11211
      FromPort: 11211
      SourceSecurityGroupId: !Ref MemcachedClientSecurityGroup

  MemcachedParameters:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      Description: Chatanoo memcached params
      CacheParameterGroupFamily: memcached1.4
      Properties:
        cas_disabled: '1'

  MemcachedSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Chatanoo memcached subnet group
      SubnetIds:
        - !Ref MemcachedSubnet1
        - !Ref MemcachedSubnet2

  MemcachedCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AZMode: !If [UseMultiAZ, "cross-az", "single-az"]
      PreferredAvailabilityZone: !If
        - UseMultiAZ
        - !Select [0, !GetAZs { Ref: 'AWS::Region'}]
        - !Ref "AWS::NoValue"
      CacheNodeType: !Ref MemcachedInstanceType
      Port: '11211'
      CacheParameterGroupName: !Ref MemcachedParameters
      VpcSecurityGroupIds:
        - !Ref MemcachedClusterSecurityGroup
      CacheSubnetGroupName: !Ref MemcachedSubnetGroup
      Engine: memcached
      EngineVersion: 1.4.14
      NumCacheNodes: !If [UseMultiAZ, '2', '1']
      Tags:
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  #######
  # RDS #
  #######

  RDSSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Sub "${CidrPrefix}.64/27"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select ['0', !GetAZs { Ref: 'AWS::Region'}]
      Tags:
        - Key: Name
          Value: !Sub "Chatano RDSSubnet1 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  RDSSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RDSSubnet1
      RouteTableId: !Ref PrivateRouteTable

  RDSSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Sub "${CidrPrefix}.96/27"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select ['1', !GetAZs { Ref: 'AWS::Region'}]
      Tags:
        - Key: Name
          Value: !Sub "Chatano RDSSubnet2 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  RDSSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RDSSubnet2
      RouteTableId: !Ref PrivateRouteTable

  RDSNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Sub "Chatano RDSNetworkAcl (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  InboundRDSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref RDSNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3306
        To: 3306

  InboundEmphemeralRDSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref RDSNetworkAcl
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  OutboundRDSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref RDSNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  RDSSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref RDSSubnet1
      NetworkAclId: !Ref RDSNetworkAcl

  RDSSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref RDSSubnet2
      NetworkAclId: !Ref RDSNetworkAcl

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: Chatano RDS SubnetGroup
      SubnetIds:
        - !Ref RDSSubnet1
        - !Ref RDSSubnet2
      Tags:
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  RDSClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Chatanoo RDS Client SecurityGroup
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Sub "Chatano RDSClientSecurityGroup (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  RDSInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Chatanoo RDS Cluster SecurityGroup
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Sub "Chatano RDSInstanceSecurityGroup (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  RDSInstanceIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSInstanceSecurityGroup
      IpProtocol: tcp
      ToPort: 3306
      FromPort: 3306
      SourceSecurityGroupId: !Ref RDSClientSecurityGroup

  RDSLambdaResourceIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSInstanceSecurityGroup
      IpProtocol: tcp
      ToPort: 3306
      FromPort: 3306
      SourceSecurityGroupId: !Ref ResourceSecurityGroup

  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Chatanoo RDS ParameterGroup
      Family: mysql5.6
      Tags:
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  DBUsername:
    Type: Custom::Password
    Condition: DontUseDBSnapshot
    Version: 1.0
    Properties:
      ServiceToken: !Join [":", ["arn:aws:lambda", !Ref 'AWS::Region', !Ref 'AWS::AccountId', "function", !Ref PasswordGeneratorLambda]]
      Memorable: true

  DBPassword:
    Type: Custom::Password
    Condition: DontUseDBSnapshot
    Version: 1.0
    Properties:
      ServiceToken: !Join [":", ["arn:aws:lambda", !Ref 'AWS::Region', !Ref 'AWS::AccountId', "function", !Ref PasswordGeneratorLambda]]
      Strong: true

  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      AllocatedStorage: 5
      AutoMinorVersionUpgrade: true
      AvailabilityZone: !Select ['0', !GetAZs { Ref: 'AWS::Region'}]
      BackupRetentionPeriod: 7
      DBInstanceClass: !Ref RDSInstanceType
      DBParameterGroupName: !Ref RDSDBParameterGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: mysql
      EngineVersion: 5.6.22
      DBName: !If [UseDBSnapshot, !Ref "AWS::NoValue", chatanoo]
      MasterUsername: !If [UseDBSnapshot, !Ref DBSnapshotUser, !Ref DBUsername]
      MasterUserPassword: !If [UseDBSnapshot, !Ref DBSnapshotPassword, !Ref DBPassword]
      DBSnapshotIdentifier: !If [UseDBSnapshot, !Ref DBSnapshot, !Ref "AWS::NoValue"]
      MultiAZ: !If [UseMultiAZ, "true", "false"]
      Port: '3306'
      PubliclyAccessible: false
      StorageEncrypted: false
      StorageType: standard
      VPCSecurityGroups:
        - !Ref RDSInstanceSecurityGroup
      Tags:
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  DatabaseSchema:
    Type: Custom::SQLRequest
    Condition: DontUseDBSnapshot
    Version: 1.0
    Properties:
      ServiceToken: !Join [":", ["arn:aws:lambda", !Ref 'AWS::Region', !Ref 'AWS::AccountId', "function", !Ref SQLRequestLambda]]
      Host: !GetAtt RDSInstance.Endpoint.Address
      Port: !GetAtt RDSInstance.Endpoint.Port
      User: !If [UseDBSnapshot, !Ref DBSnapshotUser, !Ref DBUsername]
      Password: !If [UseDBSnapshot, !Ref DBSnapshotPassword, !Ref DBPassword]
      Database: chatanoo
      Engine: mysql
      Request:
        Bucket: !Ref DeploymentBucket
        Key: !Ref CoreDBSchemaKey

  ###############
  # Application #
  ###############

  CoreSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Sub "${CidrPrefix}.128/27"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select ['0', !GetAZs { Ref: 'AWS::Region'}]
      Tags:
        - Key: Name
          Value: !Sub "Chatano CoreSubnet1 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  CoreSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CoreSubnet1
      RouteTableId: !Ref PrivateRouteTable

  CoreSubnet2:
    Type: AWS::EC2::Subnet
    Condition: UseMultiAZ
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Sub "${CidrPrefix}.160/27"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select ['1', !GetAZs { Ref: 'AWS::Region'}]
      Tags:
        - Key: Name
          Value: !Sub "Chatano CoreSubnet2 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  CoreSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseMultiAZ
    Properties:
      SubnetId: !Ref CoreSubnet2
      RouteTableId: !Ref PrivateRouteTable

  CoreNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Sub "Chatano CoreNetworkAcl (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  InboundHTTPCoreNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref CoreNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Sub "${CidrPrefix}.192/26" # CorePublicSubnets Cidr
      PortRange:
        From: 80
        To: 80

  InboundHTTPSCoreNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref CoreNetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Sub "${CidrPrefix}.192/26" # CorePublicSubnets Cidr
      PortRange:
        From: 443
        To: 443

  InboundSSHCoreNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref CoreNetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  InboundEmphemeralCoreNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref CoreNetworkAcl
      RuleNumber: 201
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  OutboundCoreNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref CoreNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  CoreSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref CoreSubnet1
      NetworkAclId: !Ref CoreNetworkAcl

  CoreSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: UseMultiAZ
    Properties:
      SubnetId: !Ref CoreSubnet2
      NetworkAclId: !Ref CoreNetworkAcl

  CorePublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Sub "${CidrPrefix}.192/27"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select ['0', !GetAZs { Ref: 'AWS::Region'}]
      Tags:
        - Key: Name
          Value: !Sub "Chatano CorePublicSubnet1 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  CorePublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CorePublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  CorePublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: UseMultiAZ
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Sub "${CidrPrefix}.224/27"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select ['1', !GetAZs { Ref: 'AWS::Region'}]
      Tags:
        - Key: Name
          Value: !Sub "Chatano CorePublicSubnet2 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  CorePublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseMultiAZ
    Properties:
      SubnetId: !Ref CorePublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  CorePublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Sub "Chatano CorePublicNetworkAcl (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  InboundHTTPCorePublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref CorePublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  InboundHTTPSCorePublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref CorePublicNetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  InboundEmphemeralCorePublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref CorePublicNetworkAcl
      RuleNumber: 201
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  OutboundCorePublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref CorePublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  CorePublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref CorePublicSubnet1
      NetworkAclId: !Ref CorePublicNetworkAcl

  CorePublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: UseMultiAZ
    Properties:
      SubnetId: !Ref CorePublicSubnet2
      NetworkAclId: !Ref CorePublicNetworkAcl

  CoreEBInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: BucketAccess
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::elasticbeanstalk-*
                  - arn:aws:s3:::elasticbeanstalk-*/*

  CoreEBEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref CoreEBInstanceRole

  CoreEBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - elasticbeanstalk.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: elasticbeanstalk
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: HealthReporting
                Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeInstanceHealth
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ec2:GetConsoleOutput
                  - ec2:AssociateAddress
                  - ec2:DescribeAddresses
                  - ec2:DescribeSecurityGroups
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:DescribeNotificationConfigurations
                Resource:
                  - '*'
              - Sid: AllowOperations
                Effect: Allow
                Action:
                  - autoscaling:AttachInstances
                  - autoscaling:CreateAutoScalingGroup
                  - autoscaling:CreateLaunchConfiguration
                  - autoscaling:DeleteLaunchConfiguration
                  - autoscaling:DeleteAutoScalingGroup
                  - autoscaling:DeleteScheduledAction
                  - autoscaling:DescribeAccountLimits
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:DescribeLoadBalancers
                  - autoscaling:DescribeNotificationConfigurations
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:DescribeScheduledActions
                  - autoscaling:DetachInstances
                  - autoscaling:PutScheduledUpdateGroupAction
                  - autoscaling:ResumeProcesses
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:SuspendProcesses
                  - autoscaling:TerminateInstanceInAutoScalingGroup
                  - autoscaling:UpdateAutoScalingGroup
                  - cloudwatch:PutMetricAlarm
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateSecurityGroup
                  - ec2:DeleteSecurityGroup
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeImages
                  - ec2:DescribeInstances
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:TerminateInstances
                  - ecs:CreateCluster
                  - ecs:DeleteCluster
                  - ecs:DescribeClusters
                  - ecs:RegisterTaskDefinition
                  - elasticbeanstalk:*
                  - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
                  - elasticloadbalancing:ConfigureHealthCheck
                  - elasticloadbalancing:CreateLoadBalancer
                  - elasticloadbalancing:DeleteLoadBalancer
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DescribeInstanceHealth
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - iam:ListRoles
                  - iam:PassRole
                  - logs:CreateLogGroup
                  - logs:PutRetentionPolicy
                  - rds:DescribeDBInstances
                  - rds:DescribeOrderableDBInstanceOptions
                  - s3:CopyObject
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectMetadata
                  - s3:ListBucket
                  - s3:listBuckets
                  - s3:ListObjects
                  - sns:CreateTopic
                  - sns:GetTopicAttributes
                  - sns:ListSubscriptionsByTopic
                  - sns:Subscribe
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource:
                  - "*"
              - Sid: AllowS3OperationsOnElasticBeanstalkBuckets
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - arn:aws:s3:::elasticbeanstalk-*
                  - arn:aws:s3:::elasticbeanstalk-*/*
              - Sid: AllowCloudformationOperationsOnElasticBeanstalkStacks
                Effect: Allow
                Action:
                  - cloudformation:*
                Resource:
                  - arn:aws:cloudformation:*:*:stack/awseb-*
                  - arn:aws:cloudformation:*:*:stack/eb-*

  CoreApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: Chatanoo Core

  CoreApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref CoreApplication
      Description: Chatanoo Core Application Version
      SourceBundle:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref CoreApplicationKey

  CoreConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref CoreApplication
      Description: Chatanoo Core Configuration Template
      SolutionStackName: 64bit Amazon Linux 2016.09 v2.2.0 running PHP 5.6
      OptionSettings:
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: LoadBalanced
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: !Ref CoreEBRole
        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: !If [UseMultiAZ, '2', '1']
        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: !If [UseMultiAZ, '8', '4']

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: EC2KeyName
          Value: !Ref EC2KeyName
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: !Ref CoreInstanceType
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !GetAtt CoreEBEC2InstanceProfile.Arn
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: SecurityGroups
          Value: !Join [',', [!Ref MemcachedClientSecurityGroup, !Ref RDSClientSecurityGroup, !Ref InstanceSecurityGroup]]
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref VPCId
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !If
            - UseMultiAZ
            - !Join [',', [!Ref CoreSubnet1, !Ref CoreSubnet2]]
            - !Ref CoreSubnet1
        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value: !If
            - UseMultiAZ
            - !Join [',', [!Ref CorePublicSubnet1, !Ref CorePublicSubnet2]]
            - !Ref CorePublicSubnet1
        - Namespace: aws:elasticbeanstalk:healthreporting:system
          OptionName: SystemType
          Value: enhanced
        - Namespace: aws:elasticbeanstalk:healthreporting:system
          OptionName: ConfigDocument
          Value: |
            {
              "CloudWatchMetrics": {
                "Environment": {
                  "InstancesSevere": 60,
                  "ApplicationLatencyP90": 60,
                  "ApplicationLatencyP99": 60,
                  "ApplicationLatencyP95": 60,
                  "InstancesUnknown": 60,
                  "ApplicationLatencyP85": 60,
                  "InstancesInfo": 60,
                  "ApplicationRequests2xx": 60,
                  "InstancesDegraded": 60,
                  "InstancesWarning": 60,
                  "ApplicationLatencyP50": 60,
                  "ApplicationRequestsTotal": 60,
                  "InstancesNoData": 60,
                  "InstancesPending": 60,
                  "ApplicationLatencyP10": 60,
                  "ApplicationRequests5xx": 60,
                  "ApplicationLatencyP75": 60,
                  "InstancesOk": 60,
                  "ApplicationRequests3xx": 60,
                  "ApplicationRequests4xx": 60
              },
              "Instance": {
                  "ApplicationLatencyP90": 60,
                  "ApplicationLatencyP99": 60,
                  "ApplicationLatencyP95": 60,
                  "ApplicationLatencyP85": 60,
                  "CPUUser": 60,
                  "ApplicationRequests2xx": 60,
                  "CPUIdle": 60,
                  "ApplicationLatencyP50": 60,
                  "ApplicationRequestsTotal": 60,
                  "RootFilesystemUtil": 60,
                  "LoadAverage1min": 60,
                  "CPUIrq": 60,
                  "CPUNice": 60,
                  "CPUIowait": 60,
                  "ApplicationLatencyP10": 60,
                  "LoadAverage5min": 60,
                  "ApplicationRequests5xx": 60,
                  "ApplicationLatencyP75": 60,
                  "CPUSystem": 60,
                  "ApplicationRequests3xx": 60,
                  "ApplicationRequests4xx": 60,
                  "InstanceHealth": 60,
                  "CPUSoftirq": 60
                }
              },
              "Version": 1
            }

        - !If
          - UseDNSAndHTTPS
          - Namespace: aws:elb:listener:443
            OptionName: ListenerProtocol
            Value: HTTPS
          - Namespace: aws:elb:listener
            OptionName: ListenerProtocol
            Value: HTTP
        - !If
          - UseDNSAndHTTPS
          - Namespace: aws:elb:listener:443
            OptionName: SSLCertificateId
            Value: !Ref Certificate
          - !Ref 'AWS::NoValue'
        - !If
          - UseDNSAndHTTPS
          - Namespace: aws:elb:listener:443
            OptionName: InstancePort
            Value: 80
          - Namespace: aws:elb:listener
            OptionName: InstancePort
            Value: 80
        - !If
          - UseDNSAndHTTPS
          - Namespace: aws:elb:listener:443
            OptionName: InstanceProtocol
            Value: HTTP
          - Namespace: aws:elb:listener
            OptionName: InstanceProtocol
            Value: HTTP

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: APPLICATION_ENV
          Value: production
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: DATABASE_HOST
          Value: !GetAtt RDSInstance.Endpoint.Address
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: DATABASE_NAME
          Value: chatanoo
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: DATABASE_PASS
          Value: !If [UseDBSnapshot, !Ref DBSnapshotPassword, !Ref DBPassword]
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: DATABASE_USER
          Value: !If [UseDBSnapshot, !Ref DBSnapshotUser, !Ref DBUsername]
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: MEMCACHED_HOST
          Value: !GetAtt MemcachedCluster.ConfigurationEndpoint.Address
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: MEMCACHED_PORT
          Value: !GetAtt MemcachedCluster.ConfigurationEndpoint.Port

  CoreEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref CoreApplication
      Description: Chatanoo Core Environment
      TemplateName: !Ref CoreConfigurationTemplate
      VersionLabel: !Ref CoreApplicationVersion
      Tags:
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  CoreDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Comment: !Join [' - ', [!Ref ProjectName, Public DNS Record for Core]]
      Name: !Join ['', [!Ref SubDomainName, '.', !Ref DomainName, '.']]
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !GetAtt CoreEnvironment.EndpointURL
    Condition: UseDNSRecord

  Certificate:
    Type: "AWS::CertificateManager::Certificate"
    Condition: UseDNSAndHTTPS
    Properties:
      DomainName: !Join ['.', [!Ref SubDomainName, !Ref DomainName]]
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          ValidationDomain: !Ref DomainName
      SubjectAlternativeNames:
        - !Ref DomainName
      Tags:
        - Resource Tag

  ###########################
  # Lambda to create ApiKey #
  ###########################

  ChatanooApiKeyBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - Authorization
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      Tags:
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: core

  ChatanooApiKeyList:
    Type: Custom::S3Uploader
    Version: 1.0
    Properties:
      ServiceToken: !Join [":", [ "arn:aws:lambda", !Ref 'AWS::Region', !Ref 'AWS::AccountId', "function", !Ref S3UploaderLambda] ]
      Source: !If
        - UseDBSnapshot
        - S3:
            Bucket: !Ref ChatanooApiKeyBucketSource
            Key: apikeys.json
        - Json:
            api_key: []
      Destination:
        Bucket: !Ref ChatanooApiKeyBucket
        Key: apikeys.json
        ACL: public-read

  ChatanooApiKeyEnvironment:
    Type: Custom::S3Uploader
    Version: 1.0
    Properties:
      ServiceToken: !Join [":", [ "arn:aws:lambda", !Ref 'AWS::Region', !Ref 'AWS::AccountId', "function", !Ref S3UploaderLambda] ]
      Source:
        Json:
          DBHost: !GetAtt RDSInstance.Endpoint.Address
          DBPort: !GetAtt RDSInstance.Endpoint.Port
          DBUser: !If [UseDBSnapshot, !Ref DBSnapshotUser, !Ref DBUsername]
          DBPass: !If [UseDBSnapshot, !Ref DBSnapshotPassword, !Ref DBPassword]
          DBName: chatanoo
          ApiKeysObject: !GetAtt ChatanooApiKeyList.Key
      Destination:
        Bucket: !Ref ChatanooApiKeyBucket
        Key: config.json

  ChatanooApiKeyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - s3:GetObject
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - "*"

  ChatanooApiKeyFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Description: !Sub "(${ProjectName}) Chatanoo ApiKey Manager"
      Role: !GetAtt ChatanooApiKeyRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref ChatanooApiKeyKey
      Runtime: nodejs4.3
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref RDSClientSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref CoreSubnet1
            - !Ref CoreSubnet2
          - - !Ref CoreSubnet1

Outputs:
  ChatanooApiKey:
    Value: !Ref ChatanooApiKeyFunction
  ChatanooApiKeyBucket:
    Value: !GetAtt ChatanooApiKeyEnvironment.Bucket
  ChatanooApiKeyEnvironmentKey:
    Value: !GetAtt ChatanooApiKeyEnvironment.Key
  ChatanooApiKeyList:
    Value: !Join ['', ['https://', !GetAtt ChatanooApiKeyEnvironment.Bucket, '.s3.amazonaws.com/', !GetAtt ChatanooApiKeyList.Key]]
  Url:
    Value: !If
      - UseDNSRecord
      - !Join ['', [!If [UseHTTPS, 'https://', 'http://'], !Ref SubDomainName, '.', !Ref DomainName]]
      - !Join ['', [!If [UseHTTPS, 'https://', 'http://'], !GetAtt CoreEnvironment.EndpointURL]]
